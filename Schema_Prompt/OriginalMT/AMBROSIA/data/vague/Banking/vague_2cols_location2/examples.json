[
    {
        "question": "Show a list of transactions by customer and location where the transaction amount is less than 1000 and order the list by date and lower amounts at the beginning of the list by date.",
        "sql_query1": "SELECT\r\nAccounts.AccountNumber,\r\nCustomers.FullName,\r\nTransactions.Amount,\r\nTransactions.TransactionDate,\r\nAddresses.City\r\nFROM Accounts\r\nJOIN Customers ON Customers.CustomerID = Accounts.CustomerID\r\nJOIN Transactions ON Transactions.AccountNumber = Accounts.AccountNumber\r\nJOIN Addresses ON Addresses.CustomerID = Accounts.CustomerID\r\nWHERE Transactions.Amount < '1000'\r\nORDER BY Transactions.TransactionDate ASC, Transactions.Amount ASC",
        "sql_query2": "SELECT\r\nAccounts.AccountNumber,\r\nCustomers.FullName,\r\nTransactions.Amount,\r\nTransactions.TransactionDate,\r\nAddresses.Country\r\nFROM Accounts\r\nJOIN Customers ON Customers.CustomerID = Accounts.CustomerID\r\nJOIN Transactions ON Transactions.AccountNumber = Accounts.AccountNumber\r\nJOIN Addresses ON Addresses.CustomerID = Accounts.CustomerID\r\nWHERE Transactions.Amount < '1000'\r\nORDER BY Transactions.TransactionDate ASC, Transactions.Amount ASC",
        "sql_query3": "SELECT\r\nAccounts.AccountNumber,\r\nCustomers.FullName,\r\nTransactions.Amount,\r\nTransactions.TransactionDate,\r\nAddresses.City, Country\r\nFROM Accounts\r\nJOIN Customers ON Customers.CustomerID = Accounts.CustomerID\r\nJOIN Transactions ON Transactions.AccountNumber = Accounts.AccountNumber\r\nJOIN Addresses ON Addresses.CustomerID = Accounts.CustomerID\r\nWHERE Transactions.Amount < '1000'\r\nORDER BY Transactions.TransactionDate ASC, Transactions.Amount ASC",
        "interpretation1": "For each customer and their resident cities, list all their transactions where the amount is less than 1000. Order this list by first date, and value i.e. for transactions that take place on the same date, list the smallest amounts first.",
        "interpretation2": "For each customer and their resident countries, list all their transactions where the amount is less than 1000. Order this list by first date, and value i.e. for transactions that take place on the same date, list the smallest amounts first.",
        "interpretation3": "For each customer and their resident cities and countries, list all their transactions where the amount is less than 1000. Order this list by first date, and value i.e. for transactions that take place on the same date, list the smallest amounts first.",
        "sql_query_general": "SELECT\r\nAccounts.AccountNumber,\r\nCustomers.FullName,\r\nTransactions.Amount,\r\nTransactions.TransactionDate,\r\nAddresses.Location\r\nFROM Accounts\r\nJOIN Customers ON Customers.CustomerID = Accounts.CustomerID\r\nJOIN Transactions ON Transactions.AccountNumber = Accounts.AccountNumber\r\nJOIN Addresses ON Addresses.CustomerID = Accounts.CustomerID\r\nWHERE Transactions.Amount < '1000'\r\nORDER BY Transactions.TransactionDate ASC, Transactions.Amount ASC"
    },
    {
        "question": "Show a list of the accounts, customers, locations and banks ordered by banks and then by location.",
        "sql_query1": "SELECT\r\nCustomers.FullName,\r\nAccounts.AccountNumber, \r\nAddresses.Banks,\r\nAddresses.City\r\nFROM Accounts\r\nJOIN Customers ON Customers.CustomerID = Accounts.CustomerID\r\nJOIN Addresses ON Addresses.CustomerID = Accounts.CustomerID\r\nORDER BY Banks ASC, City ASC",
        "sql_query2": "SELECT\r\nCustomers.FullName,\r\nAccounts.AccountNumber, \r\nAddresses.Banks,\r\nAddresses.Country\r\nFROM Accounts\r\nJOIN Customers ON Customers.CustomerID = Accounts.CustomerID\r\nJOIN Addresses ON Addresses.CustomerID = Accounts.CustomerID\r\nORDER BY Banks ASC, Country ASC",
        "sql_query3": "SELECT\r\nCustomers.FullName,\r\nAccounts.AccountNumber, \r\nAddresses.Banks,\r\nAddresses.City, Country\r\nFROM Accounts\r\nJOIN Customers ON Customers.CustomerID = Accounts.CustomerID\r\nJOIN Addresses ON Addresses.CustomerID = Accounts.CustomerID\r\nORDER BY Banks ASC, City, Country ASC",
        "interpretation1": "Show a list of the accounts, customers, cities and banks ordered by banks and then by city.",
        "interpretation2": "Show a list of the accounts, customers, countries and banks ordered by banks and then by country.",
        "interpretation3": "Show a list of the accounts, customers, cities, countries and banks ordered by banks and then by city and country.",
        "sql_query_general": "SELECT\r\nCustomers.FullName,\r\nAccounts.AccountNumber, \r\nAddresses.Banks,\r\nAddresses.Location\r\nFROM Accounts\r\nJOIN Customers ON Customers.CustomerID = Accounts.CustomerID\r\nJOIN Addresses ON Addresses.CustomerID = Accounts.CustomerID\r\nORDER BY Banks ASC, Location ASC"
    }
]